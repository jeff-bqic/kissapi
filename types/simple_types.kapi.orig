/*
* type definitions
*/

AccountType: Enum
{
    description: "the type of the account"
    values: [ IBAN, OTHER ]
    example: "IBAN"
}

AddressType: Enum
{
    description: "the type of the address"
    values: [ RESIDENTIAL, SHIPPING, BILLING ]
    example: "RESIDENTIAL"
}

AddressTypes: Array[1..3]
{
    description: "the address types"
    item_type: Str
}

Addresses: Array[1..3]
{
    description: "the addresses of a legal entity"
    items: Address
    uniqueItems: true
    example: '
      [
        bla
        bla
      ]'
}

Amount: Str[1..30]
{
    description: "an amount"
    pattern: /^[-+]?\d{1,20}(.\d{1,8})?$/
    example: "+245.784"
}

BIC: Str[8..11]
{
    description: "Business Identifier Code (ISO 9362)"
    pattern: /^[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?$/
    example: "DEUTDEFFXXX"
}

Country: Str[2]
{
    description: "the ISO 3166-1 alpha2 code of the country"
    example: "DE"
}

Currency: Str[3]
{
    description: "the ISO 4217 alpha3 currency code"
    example: "EUR"
}

DocumentId: UUID
{
    description: "the unique ID of a document"
    example: '286588c9-37a5-4e71-b802-43b54e247db2'
}

DocumentReferences: Map
{
    description: "object with a list of document references; valid keys are defined in DocumentType"
    valueType: DocumentId
}

DocumentType: Str[1..50]
{
    description: "the type of a document"
    example: "CONTRACT"
}

Email: Str
{
    description: "an e-mail address"
    pattern: /^[A-Za-z0-9!#'$%&*+\/=?^_‘\{\|\}~-]+(?:\.[A-Za-z0-9!#'$%&*+\/=?^_‘{|}~-]+)*@(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?$/
    example: "hugo@hacker.com"
}

File: Binary
{
    description: "a file"
    example: "asdsadsf"
}

Gender: Enum
{
    description: "the gender of a person"
    values: [ FEMALE, MALE, OTHER ]
    example: "FEMALE"
}

IBAN: Str[16..42]
{
    description: "International Bank Account Number (ISO 13616-1:2007)"
    pattern: /^([A-Z]{2}[ \-]?[0-9]{2})(?=(?:[ \-]?[A-Z0-9]){9,30}$)((?:[ \-]?[A-Z0-9]{3,5}){2,7})([ \-]?[A-Z0-9]{1,3})?$/
    example: "DE75 5121 0800 1245 1261 99"
}

JWT: Str
{
    description: "a JSON Web Token"
    pattern: /^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.([A-Za-z0-9_-]+)?$/
    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpdGVtcyI6WzAsMiw0XSwiaWF0IjoxNDkzMTM5NjU5LCJleHAiOjE0OTMxNDMyNTl9.932ZxtZzy1qhLXs932hd04J58Ihbg5_g_rIrj-Z16Js"
}

Language: Str[2]
{
    description: "ISO 639-1 alpha2 language code"
    example: "EN"
}

LegalStatus: Enum
{
    description: "the legal status of a person"
    values: [ SINGLE, MARRIED, DIVORCED, LEGALLYSEPARATED, REGISTEREDPARTNERSHIP, WIDOWED ]
    example: "SINGLE"
}

NonNegativeInt: Int[0..Infinite]
{
    description: "a natural number (integer greater or equal zero)"
    example: 0
}

PaginationPage: NonNegativeInt
{
    description: "the current page of the pagination"
    example: "4"
}

PaginationLimit: NonNegativeInt
{
    description: "the maximum number of entries per page"
    example: "20"
}

PaginationLast: NonNegativeInt
{
    description: "the last page of a pagination"
    example: "13"
}

PaginationTotal: NonNegativeInt
{
    description: "the total of entries of a pagination"
    exampl:e "1024"
}

PhoneNumber: Str[20]
{
    description: "a phone number "
    pattern: /^[\+]?[(]?[0-9]{0,4}[)]?[-\s\.]?[0-9-\s]+$/
    example: "+49 345 - 974 5839"
}

OrderBy: Str[255]
{
    description: 'string with a comma separated list of sort criteria 
                  composed of a name direction pair like "field:asc|desc"
                  where "asc" is the default direction'
    example: "name:desc,created"
}

SearchFor: Str[255]
{
    description: 'a comma separated list of search criteria'
    example: "name=B%,active=1"
}

SessionId: UUID
{
    description: "the unique ID of a document"
    example: '5d478950-1cc0-4ca6-b3a5-2f8f2b08d036'
}

URI: Str
{
    description: "an URI"
    pattern: /^([-A-Za-z0-9+.]+):(?:\/\/(?:((?:[-A-Za-z0-9._~!'$&()*+,;=:]|%[0-9a-fA-F]{2})*)@)?((?:[-A-Za-z0-9._~!'$&()*+,;=]|%[0-9a-fA-F]{2})*)(?::(\d*))?(\/(?:[-A-Za-z0-9._~!'$&()*+,;=:@\/]|%[0-9a-fA-F]{2})*)?|(\/?(?:[-A-Za-z0-9._~!'$&()*+,;=:@]|%[0-9a-fA-F]{2})+(?:[-A-Za-z0-9._~!'$&()*+,;=:@\/]|%[0-9a-fA-F]{2})*)?)(?:\?((?:[-A-Za-z0-9._~!\$\&\(\)\*\+,;=:\/?@]|%[0-9a-fA-F]{2})*))?(?:#((?:[-A-Za-z0-9._~!'$&()*+,;=:\/?@]|%[0-9a-fA-F]{2})*))?$/,
    example: "https://www.kisssapi.com/"
}

UUID: Str [36]
{
    description: "an UUID"
    pattern: /^[0-9A-Fa-f]{8}(?:-[0-9A-Fa-f]{4}){3}-[0-9A-Fa-f]{12}$/
    example: "cdb7915d-41cb-45b7-948e-b62205dff2f9"
}
